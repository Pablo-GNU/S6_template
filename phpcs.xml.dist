<?xml version="1.0" ?>
<ruleset name="Coding Standard">

    <config name="installed_paths" value="vendor/slevomat/coding-standard,vendor/phpcompatibility/php-compatibility"/>
    <rule ref="PHPCompatibility"/>
    <config name="testVersion" value="8.1-"/>

    <arg name="extensions" value="php"/>
    <ini name="memory_limit" value="-1" />

    <exclude-pattern>/app/var/*</exclude-pattern>
    <exclude-pattern>/vendor/*</exclude-pattern>
    <exclude-pattern>/node_modules/*</exclude-pattern>

    <rule ref="PSR12">
        <exclude name="Generic.Metrics.CyclomaticComplexity" />
    </rule>

    <!-- Require presence of constant visibility -->
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility"/>
    <!-- Forbid multi constant definition -->
    <rule ref="SlevomatCodingStandard.Classes.DisallowMultiConstantDefinition"/>
    <!-- Forbid multi property definition -->
    <rule ref="SlevomatCodingStandard.Classes.DisallowMultiPropertyDefinition"/>
    <!-- Forbid empty lines after class/interface/trait opening and before closing braces -->
    <rule ref="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces">
        <properties>
            <property name="linesCountAfterOpeningBrace" value="0"/>
            <property name="linesCountBeforeClosingBrace" value="0"/>
        </properties>
    </rule>
    <!-- Require usage of ::class instead of __CLASS__, get_class(), get_class($this), get_called_class() and get_parent_class() -->
    <rule ref="SlevomatCodingStandard.Classes.ModernClassNameReference"/>
    <rule ref="Generic.Classes.DuplicateClassName"/>
	<rule ref="SlevomatCodingStandard.Classes.MethodSpacing">
		<properties>
			<property name="minLinesCount" value="1"/>
			<property name="maxLinesCount" value="1"/>
		</properties>
	</rule>

    <!-- report invalid format of inline phpDocs with @var -->
    <rule ref="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration"/>
    <!-- Forbid useless @inheritDoc comments -->
    <rule ref="SlevomatCodingStandard.Commenting.UselessInheritDocComment"/>
    <!-- Forbid assignments in conditions -->
    <rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition"/>
    <!-- Require consistent spacing for control structures -->
    <rule ref="SlevomatCodingStandard.ControlStructures.BlockControlStructureSpacing">
        <properties>
            <property name="controlStructures" type="array">
                <element value="if"/>
                <element value="do"/>
                <element value="while"/>
                <element value="for"/>
                <element value="foreach"/>
                <element value="switch"/>
                <element value="try"/>
            </property>
        </properties>
    </rule>
    <!-- Require usage of early exit -->
    <rule ref="SlevomatCodingStandard.ControlStructures.EarlyExit"/>
    <!-- Require consistent spacing for jump statements -->
    <rule ref="SlevomatCodingStandard.ControlStructures.JumpStatementsSpacing"/>
    <!-- Require new instances with parentheses -->
    <rule ref="SlevomatCodingStandard.ControlStructures.NewWithParentheses"/>
    <!-- Require usage of null coalesce operator when possible -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator"/>
    <!-- Require usage of ternary operator when possible -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireTernaryOperator">
        <!-- But multiline is useful for readability -->
        <properties>
            <property name="ignoreMultiline" value="true"/>
        </properties>
    </rule>
    <!-- Require static closures for microoptimization -->
    <rule ref="SlevomatCodingStandard.Functions.StaticClosure"/>
    <!-- Forbid unused function parameters -->
    <rule ref="SlevomatCodingStandard.Functions.UnusedParameter"/>
    <!-- Forbids useless parameter default values -->
    <rule ref="SlevomatCodingStandard.Functions.UselessParameterDefaultValue"/>
    <!-- Require global functions to be referenced via a fully qualified name -->
    <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalFunctions"/>
    <!-- Forbid multiple use statements on same line -->
    <rule ref="SlevomatCodingStandard.Namespaces.MultipleUsesPerLine"/>
    <!-- Require one newline around namespace declaration -->
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceSpacing">
        <properties>
            <property name="linesCountBeforeNamespace" value="1"/>
            <property name="linesCountAfterNamespace" value="1"/>
        </properties>
    </rule>
    <!-- Forbid unused use statements -->
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" value="true"/>
            <property name="ignoredAnnotationNames" type="array">
                <element value="@group"/>
            </property>
        </properties>
    </rule>
    <!-- Forbid useless alias for classes, constants and functions -->
    <rule ref="SlevomatCodingStandard.Namespaces.UselessAlias"/>
    <!-- Require empty newlines before and after uses -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseSpacing">
        <properties>
            <property name="linesCountBeforeFirstUse" value="1"/>
            <property name="linesCountBetweenUseTypes" value="1"/>
            <property name="linesCountAfterLastUse" value="1"/>
        </properties>
    </rule>
    <!-- Prohibits uses from the same namespace -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace" />
    <!-- Group use declarations are ugly, make diffs ugly and this sniff prohibits them -->
    <rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse" />
    <!-- Require the usage of assignment operators, eg `+=`, `.=` when possible -->
    <rule ref="SlevomatCodingStandard.Operators.RequireCombinedAssignmentOperator"/>
    <!-- Report ++ and minus-minus operators not used standalone -->
    <rule ref="SlevomatCodingStandard.Operators.RequireOnlyStandaloneIncrementAndDecrementOperators"/>
    <!-- Enforce no spacing after spread operator -->
    <rule ref="SlevomatCodingStandard.Operators.SpreadOperatorSpacing"/>
    <!-- Disallows using loose == and != comparison operators. Use === and !== instead, they are much more secure and predictable. -->
    <rule ref="SlevomatCodingStandard.Operators.DisallowEqualOperators"/>
    <!-- Report (...) used with opcode optimized builtin functions -->
    <rule ref="SlevomatCodingStandard.PHP.OptimizedFunctionsWithoutUnpacking"/>
    <!-- Forbid `list(...)` syntax -->
    <rule ref="SlevomatCodingStandard.PHP.ShortList"/>
    <!-- Forbid useless semicolon `;` -->
    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon"/>
    <!-- Enforce generics syntax in array typehints -->
    <rule ref="SlevomatCodingStandard.TypeHints.DisallowArrayTypeHintSyntax"/>
    <!-- Require use of short versions of scalar types (i.e. int instead of integer) -->
    <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints"/>
    <!-- Require ? when default value is null -->
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>
    <!-- Enforces null type hint on last position in @var, @param and @return annotations. -->
    <rule ref="SlevomatCodingStandard.TypeHints.NullTypeHintOnLastPosition"/>
    <!-- Require one space between typehint and variable, require no space between nullability sign and typehint -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>
    <!-- Require one space after and no space before colon in return types -->
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing"/>
    <!-- Require parameter type hints to be declared -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint">
        <properties>
            <property name="enableMixedTypeHint" value="false"/>
            <property name="enableUnionTypeHint" value="false"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint.UselessAnnotation">
        <severity>0</severity>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingTraversableTypeHintSpecification">
        <severity>0</severity>
    </rule>
    <!-- Require return type hints to be declared -->
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint">
        <properties>
            <property name="enableMixedTypeHint" value="false"/>
            <property name="enableUnionTypeHint" value="false"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint.UselessAnnotation">
        <severity>0</severity>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingTraversableTypeHintSpecification">
        <severity>0</severity>
    </rule>
    <!-- Forbid useless @var for constants -->
    <rule ref="SlevomatCodingStandard.TypeHints.UselessConstantTypeHint"/>
    <!-- Forbid duplicate assignments to a variable -->
    <rule ref="SlevomatCodingStandard.Variables.DuplicateAssignmentToVariable"/>
    <!-- Forbid unused variables -->
    <rule ref="SlevomatCodingStandard.Variables.UnusedVariable">
        <properties>
            <property name="ignoreUnusedValuesWhenOnlyKeysAreUsedInForeach" value="true"/>
        </properties>
    </rule>

    <!-- These should get handled by the upstream Symfony standard later -->
    <rule ref="SlevomatCodingStandard.Arrays.SingleLineArrayWhitespace"/>
    <rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly">
        <properties>
            <property name="allowFullyQualifiedGlobalClasses" value="true"/>
            <property name="allowFullyQualifiedGlobalConstants" value="true"/>
            <property name="allowFullyQualifiedGlobalFunctions" value="true"/>
            <property name="allowFullyQualifiedExceptions" value="true"/>
            <property name="searchAnnotations" value="true"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="newlinesCountBetweenOpenTagAndDeclare" value="2"/>
            <property name="spacesCountAroundEqualsSign" value="0"/>
        </properties>
    </rule>

    <rule ref="Generic.Files.LineEndings">
        <exclude name="Generic.Files.LineEndings.InvalidEOLChar"/>
    </rule>
	<rule ref="Generic.Files.LineLength">
		<properties>
			<property name="lineLimit" value="300"/>
			<property name="absoluteLineLimit" value="0"/>
		</properties>
	</rule>

    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array" value="array=>null" />
        </properties>
    </rule>

    <arg name="colors" />

</ruleset>
